name: Build OmniPull Universal macOS DMG

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build from"
        required: true
        default: "macOS"
      version:
        description: "App version (optional, e.g., 1.2.25)"
        required: false
        default: ""

jobs:
  build-intel:
    name: Build Intel (x86_64)
    runs-on: macos-13
    env:
      BUILD_REF: ${{ github.event.inputs.branch }}
      VERSION: ${{ github.event.inputs.version }}
    defaults:
      run:
        working-directory: macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_REF || 'macOS' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build x86_64 with PyInstaller
        run: |
          pyinstaller main.py \
            --noconfirm \
            --onefile \
            --windowed \
            --name OmniPull \
            --icon icons/logo.icns \
            --add-data "modules/translations:modules/translations"

      - name: Create .app (Intel)
        run: |
          rm -rf dist/OmniPull.app
          mkdir -p dist/OmniPull.app/Contents/MacOS
          mkdir -p dist/OmniPull.app/Contents/Resources

          cp dist/OmniPull dist/OmniPull.app/Contents/MacOS/OmniPull
          chmod +x dist/OmniPull.app/Contents/MacOS/OmniPull
          cp icons/logo.icns dist/OmniPull.app/Contents/Resources/logo.icns

          APP_VERSION="${VERSION:-1.2.25}"
          cat <<EOF > dist/OmniPull.app/Contents/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key>
              <string>OmniPull</string>
              <key>CFBundleDisplayName</key>
              <string>OmniPull</string>
              <key>CFBundleExecutable</key>
              <string>OmniPull</string>
              <key>CFBundleIdentifier</key>
              <string>com.omnipull.app</string>
              <key>CFBundleShortVersionString</key>
              <string>${APP_VERSION}</string>
              <key>CFBundleVersion</key>
              <string>${APP_VERSION}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleIconFile</key>
              <string>logo</string>
          </dict>
          </plist>
          EOF

      - name: Zip Intel app (preserve resource forks)
        run: |
          cd dist
          ditto -c -k --sequesterRsrc --keepParent OmniPull.app OmniPull-intel.zip
          ls -lh OmniPull-intel.zip

      - name: Upload Intel zip
        uses: actions/upload-artifact@v4
        with:
          name: omnipull-intel-zip
          path: macOS/dist/OmniPull-intel.zip
          if-no-files-found: error

  build-arm:
    name: Build Apple Silicon (arm64)
    runs-on: macos-latest
    env:
      BUILD_REF: ${{ github.event.inputs.branch }}
      VERSION: ${{ github.event.inputs.version }}
    defaults:
      run:
        working-directory: macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_REF || 'macOS' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build arm64 with PyInstaller
        run: |
          pyinstaller main.py \
            --noconfirm \
            --onefile \
            --windowed \
            --name OmniPull \
            --icon icons/logo.icns \
            --add-data "modules/translations:modules/translations"

      - name: Create .app (ARM)
        run: |
          rm -rf dist/OmniPull.app
          mkdir -p dist/OmniPull.app/Contents/MacOS
          mkdir -p dist/OmniPull.app/Contents/Resources

          cp dist/OmniPull dist/OmniPull.app/Contents/MacOS/OmniPull
          chmod +x dist/OmniPull.app/Contents/MacOS/OmniPull
          cp icons/logo.icns dist/OmniPull.app/Contents/Resources/logo.icns

          APP_VERSION="${VERSION:-1.2.25}"
          cat <<EOF > dist/OmniPull.app/Contents/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key>
              <string>OmniPull</string>
              <key>CFBundleDisplayName</key>
              <string>OmniPull</string>
              <key>CFBundleExecutable</key>
              <string>OmniPull</string>
              <key>CFBundleIdentifier</key>
              <string>com.omnipull.app</string>
              <key>CFBundleShortVersionString</key>
              <string>${APP_VERSION}</string>
              <key>CFBundleVersion</key>
              <string>${APP_VERSION}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleIconFile</key>
              <string>logo</string>
          </dict>
          </plist>
          EOF

      - name: Zip ARM app (preserve resource forks)
        run: |
          cd dist
          ditto -c -k --sequesterRsrc --keepParent OmniPull.app OmniPull-arm.zip
          ls -lh OmniPull-arm.zip

      - name: Upload ARM zip
        uses: actions/upload-artifact@v4
        with:
          name: omnipull-arm-zip
          path: macOS/dist/OmniPull-arm.zip
          if-no-files-found: error

  merge-and-dmg:
    name: Merge & Package Universal DMG
    runs-on: macos-latest
    needs: [build-intel, build-arm]
    env:
      BUILD_REF: ${{ github.event.inputs.branch }}
      VERSION: ${{ github.event.inputs.version }}
    defaults:
      run:
        working-directory: macOS
    steps:
      - name: Checkout (for assets)
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_REF || 'macOS' }}

      - name: Download Intel zip
        uses: actions/download-artifact@v4
        with:
          name: omnipull-intel-zip
          path: macOS/artifacts/intel

      - name: Download ARM zip
        uses: actions/download-artifact@v4
        with:
          name: omnipull-arm-zip
          path: macOS/artifacts/arm

      - name: Unzip artifacts
        run: |
          mkdir -p extracted/intel extracted/arm
          ditto -x -k artifacts/intel/OmniPull-intel.zip extracted/intel
          ditto -x -k artifacts/arm/OmniPull-arm.zip extracted/arm
          echo "INTEL tree:"
          ls -R extracted/intel
          echo "ARM tree:"
          ls -R extracted/arm

      - name: Prepare Universal app base (copy Intel)
        run: |
          rm -rf dist_universal
          mkdir -p dist_universal
          cp -R "extracted/intel/OmniPull.app" "dist_universal/OmniPull.app"

      - name: Lipo merge (x86_64 + arm64)
        run: |
          INTEL_BIN="extracted/intel/OmniPull.app/Contents/MacOS/OmniPull"
          ARM_BIN="extracted/arm/OmniPull.app/Contents/MacOS/OmniPull"
          OUT_BIN="dist_universal/OmniPull.app/Contents/MacOS/OmniPull"

          lipo -create "$INTEL_BIN" "$ARM_BIN" -output "$OUT_BIN"
          chmod +x "$OUT_BIN"
          echo "Result:"
          lipo -info "$OUT_BIN"

      - name: Install appdmg
        run: npm install -g appdmg

      - name: Create DMG
        run: |
          rm -f dist/OmniPull-Universal.dmg
          rm -rf OmniPull.app
          cp -R dist_universal/OmniPull.app OmniPull.app
          appdmg appdmg.json dist/OmniPull-Universal.dmg

      - name: Upload Universal DMG
        uses: actions/upload-artifact@v4
        with:
          name: OmniPull-Universal-${{ github.event.inputs.branch }}-${{ github.sha }}
          path: macOS/dist/OmniPull-Universal.dmg
