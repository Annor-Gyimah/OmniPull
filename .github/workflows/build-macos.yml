---
name: Build & Release OmniPull (Apple Silicon)

on:
  pull_request_target:
    types: [closed]

permissions:
  contents: write

jobs:
  release-on-merge:
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'master' &&
      github.event.pull_request.head.ref == 'macOS'
    runs-on: macos-14
    env:
      MACOSX_DEPLOYMENT_TARGET: "11.0"
      EDGE_EXTENSION_ID: "mkhncokjlhefbbnjlgmnifmgejdclbhj"
      FIREFOX_EXTENSION_ID: "{e899b50f-2a29-4bad-ab4d-b192447a10d0}"
      RELEASE_TAG: ${{ vars.RELEASE_TAG }}
    defaults:
      run:
        working-directory: macOS

    steps:
      - name: Checkout master (post-merge)
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Determine version from version.py (robust)
        id: ver
        shell: bash
        working-directory: .
        run: |
          set -euo pipefail
          # Look for version.py in common places
          CANDIDATES=( "macOS/version.py" "version.py" "src/version.py" "app/version.py" "omnipull/version.py" )
          FILE=""
          for p in "${CANDIDATES[@]}"; do
            if [[ -f "$p" ]]; then FILE="$p"; break; fi
          done
          if [[ -z "$FILE" ]]; then
            echo "ERROR: Could not locate version.py. Checked: ${CANDIDATES[*]}"
            exit 1
          fi

          VER="$(python - <<PY
            import re
            s=open("$FILE",'r',encoding='utf-8').read()
            m=re.search(r"__version__\\s*=\\s*['\\"]([^'\\"]+)['\\"]", s)
            print(m.group(1) if m else '')
            PY
          )"
          if [[ -z "$VER" ]]; then
            echo "ERROR: Could not parse __version__ from $FILE"
            exit 1
          fi

          echo "version=$VER" >> "$GITHUB_OUTPUT"
          echo "Resolved VERSION=$VER from $FILE"


      - name: Compute final release tag (v.${VERSION} or override)
        id: rtag
        shell: bash
        run: |
          set -euo pipefail
          VER="${{ steps.ver.outputs.version }}"
          TAG="${RELEASE_TAG:-}"
          if [[ -z "$TAG" ]]; then
            TAG="v.${VER}"   # <— matches your existing tag style
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "Using release tag: ${TAG}"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build arm64 with PyInstaller (no aria2/ffmpeg)
        run: |
          pyinstaller main.py \
            --noconfirm \
            --onefile \
            --windowed \
            --name OmniPull \
            --icon icons/logo.icns \
            --add-data "modules/translations:modules/translations"

      - name: Assemble OmniPull.app (no third-party binaries)
        shell: bash
        run: |
          set -euo pipefail
          VER="${{ steps.ver.outputs.version }}"
          APP_DIR="dist/OmniPull.app"
          mkdir -p "$APP_DIR/Contents/MacOS" \
                   "$APP_DIR/Contents/Resources/connector"

          # Main binary + icon
          cp dist/OmniPull "$APP_DIR/Contents/MacOS/OmniPull"
          chmod +x "$APP_DIR/Contents/MacOS/OmniPull"
          cp icons/logo.icns "$APP_DIR/Contents/Resources/logo.icns"

          # Info.plist via PlistBuddy (avoids huge heredocs)
          PLIST="$APP_DIR/Contents/Info.plist"
          /usr/bin/plutil -create xml1 "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleName string OmniPull" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string OmniPull" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleExecutable string OmniPull" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleIdentifier string com.omnipull.app" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string $VER" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $VER" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundlePackageType string APPL" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :CFBundleIconFile string logo" "$PLIST"

          # Connector assets
          cp omnipull-watcher.py \
             "$APP_DIR/Contents/Resources/connector/omnipull-watcher.py"
          chmod 644 "$APP_DIR/Contents/Resources/connector/omnipull-watcher.py"

          cat > "$APP_DIR/Contents/Resources/connector/omnipull-watcher" <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          SELF="$(cd "$(dirname "$0")" && pwd)"
          PY="$SELF/omnipull-watcher.py"
          if command -v perl >/dev/null 2>&1; then
            perl -i -pe 's/\r\n?/\n/g' "$PY"
          else
            sed -i '' $'s/\r$//' "$PY" || true
          fi
          exec /usr/bin/env python3 "$PY"
          SH
          chmod 755 "$APP_DIR/Contents/Resources/connector/omnipull-watcher"

          if [[ -f browser_extensions/firefox/com.omnipull.downloader.json ]]; then
            cp browser_extensions/firefox/com.omnipull.downloader.json \
               "$APP_DIR/Contents/Resources/connector/com.omnipull.downloader.template.json"
            chmod 644 \
              "$APP_DIR/Contents/Resources/connector/com.omnipull.downloader.template.json"
          fi

      - name: Prepare DMG helper scripts (one Firefox + one Edge)
        shell: bash
        run: |
          set -euo pipefail

          # 1) Install app to ~/Applications
          cat > "Install to User Applications.command" <<'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          APP_NAME="OmniPull"
          THIS_DIR="$(cd "$(dirname "$0")" && pwd)"
          SRC_APP="$THIS_DIR/${APP_NAME}.app"
          DEST_DIR="$HOME/Applications"
          DEST_APP="$DEST_DIR/${APP_NAME}.app"
          mkdir -p "$DEST_DIR"
          /usr/bin/ditto "$SRC_APP" "$DEST_APP"
          xattr -dr com.apple.quarantine "$DEST_APP" || true
          open "$DEST_APP"
          echo "Installed to: $DEST_APP"
          SH
          chmod 755 "Install to User Applications.command"

          # 2) Firefox connector — single helper
          FFX_ID="${FIREFOX_EXTENSION_ID}"
          cat > "Install Firefox Connector (User).command" <<SH
          #!/usr/bin/env bash
          set -euo pipefail
          APP_NAME="OmniPull"
          APP_SUPPORT="\$HOME/Library/Application Support/\$APP_NAME"
          NATIVE_DIR="\$HOME/Library/Application Support/Mozilla/NativeMessagingHosts"
          MANIFEST="\$NATIVE_DIR/com.omnipull.downloader.json"

          THIS_DIR="\$(cd "\$(dirname "\$0")" && pwd)"
          SRC_DIR="\$THIS_DIR/\${APP_NAME}.app/Contents/Resources/connector"

          mkdir -p "\$APP_SUPPORT" "\$NATIVE_DIR"
          /usr/bin/ditto "\$SRC_DIR/omnipull-watcher"    "\$APP_SUPPORT/omnipull-watcher"
          /usr/bin/ditto "\$SRC_DIR/omnipull-watcher.py" "\$APP_SUPPORT/omnipull-watcher.py"

          if command -v perl >/dev/null 2>&1; then
            perl -i -pe 's/\r\n?/\n/g' "\$APP_SUPPORT/omnipull-watcher" "\$APP_SUPPORT/omnipull-watcher.py"
          else
            sed -i '' \$'s/\r$//' "\$APP_SUPPORT/omnipull-watcher" || true
            sed -i '' \$'s/\r$//' "\$APP_SUPPORT/omnipull-watcher.py" || true
          fi

          chmod 755 "\$APP_SUPPORT/omnipull-watcher"
          chmod 644 "\$APP_SUPPORT/omnipull-watcher.py"
          xattr -dr com.apple.quarantine "\$APP_SUPPORT/omnipull-watcher" "\$APP_SUPPORT/omnipull-watcher.py" 2>/dev/null || true

          cat > "\$MANIFEST" <<JSON
          {
            "name": "com.omnipull.downloader",
            "description": "Native messaging host for OmniPull",
            "path": "\$APP_SUPPORT/omnipull-watcher",
            "type": "stdio",
            "allowed_extensions": ["${FFX_ID}"]
          }
          JSON

          chmod 644 "\$MANIFEST"
          echo "Firefox user connector installed."
          echo "  Watcher : \$APP_SUPPORT/omnipull-watcher"
          echo "  Manifest: \$MANIFEST"
          SH
          chmod 755 "Install Firefox Connector (User).command"

          # 3) Edge connector — single helper
          EDGE_ID="${EDGE_EXTENSION_ID}"
          cat > "Install Edge Connector (User).command" <<SH
          #!/usr/bin/env bash
          set -euo pipefail
          APP_NAME="OmniPull"

          NATIVE_DIR="\$HOME/Library/Application Support/Microsoft Edge/NativeMessagingHosts"
          MANIFEST="\$NATIVE_DIR/com.omnipull.downloader.json"

          THIS_DIR="\$(cd "\$(dirname "\$0")" && pwd)"
          SRC_DIR="\$THIS_DIR/\${APP_NAME}.app/Contents/Resources/connector"
          APP_SUPPORT="\$HOME/Library/Application Support/\$APP_NAME"

          mkdir -p "\$APP_SUPPORT" "\$NATIVE_DIR"
          /usr/bin/ditto "\$SRC_DIR/omnipull-watcher"    "\$APP_SUPPORT/omnipull-watcher"
          /usr/bin/ditto "\$SRC_DIR/omnipull-watcher.py" "\$APP_SUPPORT/omnipull-watcher.py"

          if command -v perl >/dev/null 2>&1; then
            perl -i -pe 's/\r\n?/\n/g' "\$APP_SUPPORT/omnipull-watcher" "\$APP_SUPPORT/omnipull-watcher.py"
          else
            sed -i '' \$'s/\r$//' "\$APP_SUPPORT/omnipull-watcher" || true
            sed -i '' \$'s/\r$//' "\$APP_SUPPORT/omnipull-watcher.py" || true
          fi

          chmod 755 "\$APP_SUPPORT/omnipull-watcher"
          chmod 644 "\$APP_SUPPORT/omnipull-watcher.py"
          xattr -dr com.apple.quarantine "\$APP_SUPPORT/omnipull-watcher" "\$APP_SUPPORT/omnipull-watcher.py" 2>/dev/null || true

          cat > "\$MANIFEST" <<JSON
          {
            "name": "com.omnipull.downloader",
            "description": "Native messaging host for OmniPull",
            "path": "\$APP_SUPPORT/omnipull-watcher",
            "type": "stdio",
            "allowed_origins": [
              "chrome-extension://${EDGE_ID}/"
            ]
          }
          JSON

          chmod 644 "\$MANIFEST"
          echo "Edge user connector installed."
          echo "  Watcher : \$APP_SUPPORT/omnipull-watcher"
          echo "  Manifest: \$MANIFEST"
          echo "  Edge ID : ${EDGE_ID}"
          SH
          chmod 755 "Install Edge Connector (User).command"

      - name: Install appdmg
        run: npm install -g appdmg

      - name: Create DMG (omnipull-arm64-${VERSION}.dmg)
        shell: bash
        run: |
          set -euo pipefail
          VER="${{ steps.ver.outputs.version }}"
          APPDMG_JSON="$(pwd)/_appdmg.json"
          TITLE="OmniPull (Apple Silicon)"
          BG="icons/logo4.png"
          [[ -f "$BG" ]] || BG=""

          {
            echo '{'
            echo '  "title": "'"$TITLE"'",'
            if [[ -n "$BG" ]]; then
              echo '  "background": "'$(basename "$BG")'",'
              cp "$BG" "./$(basename "$BG")"
            fi
            echo '  "icon-size": 100,'
            echo '  "window": { "size": { "width": 720, "height": 520 } },'
            echo '  "contents": ['
            echo '    { "x": 160, "y": 180, "type": "file", "path": "dist/OmniPull.app" },'
            echo '    { "x": 480, "y": 180, "type": "link", "path": "/Applications" },'
            echo '    { "x": 160, "y": 320, "type": "file", "path": "Install to User Applications.command" },'
            echo '    { "x": 480, "y": 320, "type": "file", "path": "Install Firefox Connector (User).command" },'
            echo '    { "x": 320, "y": 420, "type": "file", "path": "Install Edge Connector (User).command" }'
            echo '  ]'
            echo '}'
          } > "$APPDMG_JSON"

          DMG_OUT="dist/omnipull-arm64-${VER}.dmg"
          rm -f "$DMG_OUT"
          appdmg "$APPDMG_JSON" "$DMG_OUT"
          ls -lh "$DMG_OUT"

      - name: Verify binary is arm64 and no aria2/ffmpeg
        shell: bash
        run: |
          set -euo pipefail
          file "dist/OmniPull.app/Contents/MacOS/OmniPull" | tee /dev/stderr | grep -q "Mach-O.*arm64"
          if find dist/OmniPull.app -iname "aria2*" -o -iname "ffmpeg*" | grep . ; then
            echo "ERROR: Found aria2/ffmpeg in app bundle."
            exit 1
          fi

      - name: Create/Update GitHub Release and Upload DMG
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.rtag.outputs.tag }}
          name: OmniPull ${{ steps.rtag.outputs.tag }}
          draft: false
          prerelease: false
          files: macOS/dist/omnipull-arm64-${{ steps.ver.outputs.version }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
