name: Build OmniPull macOS DMGs (Split Intel/ARM + auto-aria2c)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build from"
        required: true
        default: "macOS"
      version:
        description: "App version (optional, e.g., 1.2.26)"
        required: false
        default: ""

jobs:
  build-intel-dmg:
    name: Intel DMG (x86_64)
    runs-on: macos-13
    env:
      BUILD_REF: ${{ github.event.inputs.branch }}
      VERSION: ${{ github.event.inputs.version }}
    defaults:
      run:
        working-directory: macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_REF || 'macOS' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (PyInstaller + aria2)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

          # Homebrew (Intel uses /usr/local; should already exist on GitHub macOS-13)
          brew update
          brew install aria2 || true

      - name: Build x86_64 with PyInstaller
        run: |
          pyinstaller main.py \
            --noconfirm \
            --onefile \
            --windowed \
            --name OmniPull \
            --icon icons/logo.icns \
            --add-data "modules/translations:modules/translations"

      - name: Create .app (Intel) + bundle aria2c
        run: |
          APP_VERSION="${VERSION:-1.0}"
          rm -rf dist/OmniPull.app
          mkdir -p dist/OmniPull.app/Contents/MacOS
          mkdir -p dist/OmniPull.app/Contents/Resources/bin

          cp dist/OmniPull dist/OmniPull.app/Contents/MacOS/OmniPull
          chmod +x dist/OmniPull.app/Contents/MacOS/OmniPull
          cp icons/logo.icns dist/OmniPull.app/Contents/Resources/logo.icns

          cat <<EOF > dist/OmniPull.app/Contents/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key><string>OmniPull</string>
              <key>CFBundleDisplayName</key><string>OmniPull</string>
              <key>CFBundleExecutable</key><string>OmniPull</string>
              <key>CFBundleIdentifier</key><string>com.omnipull.app</string>
              <key>CFBundleShortVersionString</key><string>${APP_VERSION}</string>
              <key>CFBundleVersion</key><string>${APP_VERSION}</string>
              <key>CFBundlePackageType</key><string>APPL</string>
              <key>CFBundleIconFile</key><string>logo</string>
          </dict>
          </plist>
          EOF

          # Find Homebrew aria2c (Intel runner usually /usr/local/bin/aria2c)
          ARIA_BIN="$(command -v aria2c || true)"
          if [ -z "$ARIA_BIN" ]; then
            echo "WARNING: aria2c not found; skipping bundling (Intel)."
          else
            echo "Bundling aria2c from $ARIA_BIN"
            cp "$ARIA_BIN" dist/OmniPull.app/Contents/Resources/bin/aria2c
            chmod +x dist/OmniPull.app/Contents/Resources/bin/aria2c
          fi

      - name: Verify Intel app
        run: |
          ls -R dist/OmniPull.app
          file dist/OmniPull.app/Contents/MacOS/OmniPull
          file dist/OmniPull.app/Contents/Resources/bin/aria2c || true

      - name: Install appdmg
        run: npm install -g appdmg

      - name: Create Intel DMG
        run: |
          mkdir -p dist
          rm -rf OmniPull.app
          cp -R dist/OmniPull.app OmniPull.app
          test -f appdmg.json || { echo "Missing appdmg.json"; exit 1; }
          rm -f dist/OmniPull-Intel.dmg
          appdmg appdmg.json dist/OmniPull-Intel.dmg
          ls -lh dist/OmniPull-Intel.dmg

      - name: Upload Intel DMG
        uses: actions/upload-artifact@v4
        with:
          name: OmniPull-Intel-${{ github.event.inputs.branch }}-${{ github.sha }}
          path: macOS/dist/OmniPull-Intel.dmg
          if-no-files-found: error

  build-arm-dmg:
    name: Apple Silicon DMG (arm64)
    runs-on: macos-latest
    env:
      BUILD_REF: ${{ github.event.inputs.branch }}
      VERSION: ${{ github.event.inputs.version }}
    defaults:
      run:
        working-directory: macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_REF || 'macOS' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (PyInstaller + aria2)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

          # Homebrew on Apple Silicon is /opt/homebrew; present on macos-latest (arm64)
          brew update
          brew install aria2 || true

      - name: Build arm64 with PyInstaller
        run: |
          pyinstaller main.py \
            --noconfirm \
            --onefile \
            --windowed \
            --name OmniPull \
            --icon icons/logo.icns \
            --add-data "modules/translations:modules/translations"

      - name: Create .app (ARM) + bundle aria2c
        run: |
          APP_VERSION="${VERSION:-1.0}"
          rm -rf dist/OmniPull.app
          mkdir -p dist/OmniPull.app/Contents/MacOS
          mkdir -p dist/OmniPull.app/Contents/Resources/bin

          cp dist/OmniPull dist/OmniPull.app/Contents/MacOS/OmniPull
          chmod +x dist/OmniPull.app/Contents/MacOS/OmniPull
          cp icons/logo.icns dist/OmniPull.app/Contents/Resources/logo.icns

          cat <<EOF > dist/OmniPull.app/Contents/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleName</key><string>OmniPull</string>
              <key>CFBundleDisplayName</key><string>OmniPull</string>
              <key>CFBundleExecutable</key><string>OmniPull</string>
              <key>CFBundleIdentifier</key><string>com.omnipull.app</string>
              <key>CFBundleShortVersionString</key><string>${APP_VERSION}</string>
              <key>CFBundleVersion</key><string>${APP_VERSION}</string>
              <key>CFBundlePackageType</key><string>APPL</string>
              <key>CFBundleIconFile</key><string>logo</string>
          </dict>
          </plist>
          EOF

          # Find Homebrew aria2c (ARM runner usually /opt/homebrew/bin/aria2c)
          ARIA_BIN="$(command -v aria2c || true)"
          if [ -z "$ARIA_BIN" ]; then
            echo "WARNING: aria2c not found; skipping bundling (ARM)."
          else
            echo "Bundling aria2c from $ARIA_BIN"
            cp "$ARIA_BIN" dist/OmniPull.app/Contents/Resources/bin/aria2c
            chmod +x dist/OmniPull.app/Contents/Resources/bin/aria2c
          fi

      - name: Verify ARM app
        run: |
          ls -R dist/OmniPull.app
          file dist/OmniPull.app/Contents/MacOS/OmniPull
          file dist/OmniPull.app/Contents/Resources/bin/aria2c || true

      - name: Install appdmg
        run: npm install -g appdmg

      - name: Create Apple Silicon DMG
        run: |
          mkdir -p dist
          rm -rf OmniPull.app
          cp -R dist/OmniPull.app OmniPull.app
          test -f appdmg.json || { echo "Missing appdmg.json"; exit 1; }
          rm -f dist/OmniPull-AppleSilicon.dmg
          appdmg appdmg.json dist/OmniPull-AppleSilicon.dmg
          ls -lh dist/OmniPull-AppleSilicon.dmg

      - name: Upload Apple Silicon DMG
        uses: actions/upload-artifact@v4
        with:
          name: OmniPull-AppleSilicon-${{ github.event.inputs.branch }}-${{ github.sha }}
          path: macOS/dist/OmniPull-AppleSilicon.dmg
          if-no-files-found: error
